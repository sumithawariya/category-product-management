Opened the project in my IDE IntelliJ IDEA
Built the project using Maven:

mvn clean install
Configured the database in the application.properties file:


spring.datasource.url=jdbc:mysql://localhost:3306/category_product_db
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

Ran the application using:

IDE: Right-clicked the CategoryProductManagementApplication.java file and selected Run As > Spring Boot App.
Command Line: Executed:

mvn spring-boot:run


Tested the application endpoints using Postman to verify functionality.
3. How Did You Run the Machine Test?
Describe how the machine test was executed:

Test Environment:

Tested the Category CRUD APIs using Postman:
Verified the creation, retrieval, update, and deletion of categories.
Tested the Product CRUD APIs using Postman:
Verified the product creation, retrieval, update, and deletion.
Verified the One-to-Many Relationship between categories and products.
Tested Server-Side Pagination for both categories and products using queries like:
arduino

GET /api/categories?page=1&size=10
GET /api/products?page=1&size=10
Checked that retrieving a product also fetched its associated category details.
Outcome:

All endpoints worked as expected.
The database maintained relationships correctly, and cascading operations worked as intended.
4. DB Design
Provide the database schema details:

Tables:

category:

Column	Data Type	Constraints
id	BIGINT	Primary Key
name	VARCHAR(255)	Not Null
product:

Column	Data Type	Constraints
id	BIGINT	Primary Key
name	VARCHAR(255)	Not Null
price	DECIMAL(10, 2)	Not Null
category_id	BIGINT	Foreign Key (FK)
Relationships:

One-to-Many:
One Category can have many Products.
Defined via a foreign key in the Product table (category_id).
SQL Scripts:

sql
Copy code
CREATE TABLE category (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE product (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    category_id BIGINT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE CASCADE
);